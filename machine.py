# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _machine
else:
    import _machine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_machine.point_x_get, _machine.point_x_set)
    f = property(_machine.point_f_get, _machine.point_f_set)
    evaluated = property(_machine.point_evaluated_get, _machine.point_evaluated_set)

    def __init__(self):
        _machine.point_swiginit(self, _machine.new_point())
    __swig_destroy__ = _machine.delete_point

# Register point in _machine:
_machine.point_swigregister(point)


def point_str(self):
    if self.evaluated:
        return "{}:{}".format(self.x, self.f)
    else:
        return "{}:?".format(self.x)
point.__str__ = point_str
del point_str

class Machine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vec_accum = property(_machine.Machine_vec_accum_get, _machine.Machine_vec_accum_set)
    float_accum = property(_machine.Machine_float_accum_get, _machine.Machine_float_accum_set)
    flag = property(_machine.Machine_flag_get, _machine.Machine_flag_set)
    cpr = property(_machine.Machine_cpr_get, _machine.Machine_cpr_set)
    nsteps = property(_machine.Machine_nsteps_get, _machine.Machine_nsteps_set)
    ncalls = property(_machine.Machine_ncalls_get, _machine.Machine_ncalls_set)
    tracing = property(_machine.Machine_tracing_get, _machine.Machine_tracing_set)

    def load_code(self, bytes):
        return _machine.Machine_load_code(self, bytes)

    def step(self):
        return _machine.Machine_step(self)

    def steps(self, n):
        return _machine.Machine_steps(self, n)

    def runto(self, maxsteps, maxevals, target, tol):
        return _machine.Machine_runto(self, maxsteps, maxevals, target, tol)

    def reset(self):
        return _machine.Machine_reset(self)

    def get_vec_reg(self, i):
        return _machine.Machine_get_vec_reg(self, i)

    def set_vec_reg(self, i, v):
        return _machine.Machine_set_vec_reg(self, i, v)

    def get_float_reg(self, i):
        return _machine.Machine_get_float_reg(self, i)

    def set_float_reg(self, i, v):
        return _machine.Machine_set_float_reg(self, i, v)

    def __init__(self):
        _machine.Machine_swiginit(self, _machine.new_Machine())

        self.set_function(FunctionTable(0))




    def set_function(self, f):

            #fallback support, when functions were unmbers
        if isinstance(f, int): f = FunctionTable(f)
        #store function reference to own the object.
        self._function = f


        return _machine.Machine_set_function(self, f)

    __swig_destroy__ = _machine.delete_Machine

# Register Machine in _machine:
_machine.Machine_swigregister(Machine)

class AbstractFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def evaluate(self, x):
        return _machine.AbstractFunction_evaluate(self, x)
    __swig_destroy__ = _machine.delete_AbstractFunction

# Register AbstractFunction in _machine:
_machine.AbstractFunction_swigregister(AbstractFunction)

class FunctionTable(AbstractFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, index_):
        _machine.FunctionTable_swiginit(self, _machine.new_FunctionTable(index_))

    def evaluate(self, x):
        return _machine.FunctionTable_evaluate(self, x)
    __swig_destroy__ = _machine.delete_FunctionTable

# Register FunctionTable in _machine:
_machine.FunctionTable_swigregister(FunctionTable)


def randomize():
    return _machine.randomize()


